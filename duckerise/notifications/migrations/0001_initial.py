# Generated by Django 3.2.13 on 2022-06-05 20:32

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import notifications.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Medium',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=63, null=True)),
                ('slug', models.CharField(help_text='The sender class name for this medium.', max_length=63, unique=True)),
                ('text_format', models.CharField(choices=[('raw_text', 'Raw text'), ('rich_text', 'Rich text')], help_text='Which type of text to send via this medium', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100, unique=True)),
                ('raw_text', models.TextField(blank=True, help_text="Raw text, which can be used for sending SMS or similar mediums. Empty text won't be sent.", null=True)),
                ('rich_text', ckeditor.fields.RichTextField(blank=True, help_text="Formatted text, which can be used for sending email or similar mediums. Empty text won't be sent.", null=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Notification is active')),
                ('identifier', models.CharField(max_length=64, unique=True, validators=[notifications.validators.validate_event_identifier])),
                ('delay_seconds', models.PositiveIntegerField(default=0, help_text='Number of seconds to postpone the notifications send')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mediums', models.ManyToManyField(to='notifications.Medium')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OneTimeNotifyEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100, unique=True)),
                ('raw_text', models.TextField(blank=True, help_text="Raw text, which can be used for sending SMS or similar mediums. Empty text won't be sent.", null=True)),
                ('rich_text', ckeditor.fields.RichTextField(blank=True, help_text="Formatted text, which can be used for sending email or similar mediums. Empty text won't be sent.", null=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Notification is active')),
                ('send_time', models.DateTimeField(verbose_name='Scheduled time')),
                ('mediums', models.ManyToManyField(to='notifications.Medium')),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotificationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_id', models.CharField(blank=True, max_length=150, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='notifications', to='notifications.notificationevent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FollowUpEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delay', models.PositiveIntegerField(help_text='The number of hours this event fire from related event')),
                ('frequency', models.PositiveIntegerField(help_text='This event will fire in every x hours')),
                ('count', models.PositiveIntegerField(help_text='The number of times this event will fire')),
                ('after_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followup_events', to='notifications.notificationevent')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notifications.notificationevent')),
            ],
        ),
    ]
